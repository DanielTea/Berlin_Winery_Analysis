[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "berlin-winery-analysis"
version = "1.0.0"
description = "Data analysis and visualization tools for Berlin wineries"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Berlin Winery Analysis Team" }
]
keywords = ["berlin", "wineries", "data-analysis", "visualization", "maps", "heatmaps"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Scientific/Engineering :: GIS",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.28.0",
    "pandas>=1.5.0",
    "folium>=0.14.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
    "numpy>=1.24.0",
    "pillow>=9.0.0",
    "selenium>=4.0.0",
    "scipy>=1.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.5.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/berlin-winery-analysis"
Repository = "https://github.com/yourusername/berlin-winery-analysis"
Issues = "https://github.com/yourusername/berlin-winery-analysis/issues"
Documentation = "https://github.com/yourusername/berlin-winery-analysis#readme"

[project.scripts]
berlin-winery-analysis = "main:main"

[tool.hatch.build.targets.wheel]
packages = ["."]
include = [
    "main.py",
    "scripts/",
    "data/",
    "outputs/",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["scripts"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["scripts", "main"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
] 